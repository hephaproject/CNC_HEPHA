
C:\Users\Marci\Desktop\SERVO\test\Debug\test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c38  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000e08  08000e08  00010e08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e38  08000e38  00010e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e3c  08000e3c  00010e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000e44  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000e44  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007d1c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000147f  00000000  00000000  00027d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001142  00000000  00000000  000291c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000300  00000000  00000000  0002a310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000528  00000000  00000000  0002a610  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000020be  00000000  00000000  0002ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000013ef  00000000  00000000  0002cbf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002dfe5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000634  00000000  00000000  0002e064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000df0 	.word	0x08000df0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	08000df0 	.word	0x08000df0

08000210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000210:	b510      	push	{r4, lr}
 8000212:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000214:	f000 fcca 	bl	8000bac <HAL_RCC_GetHCLKFreq>
 8000218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000220:	f000 f876 	bl	8000310 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000224:	2200      	movs	r2, #0
 8000226:	4621      	mov	r1, r4
 8000228:	f04f 30ff 	mov.w	r0, #4294967295
 800022c:	f000 f83c 	bl	80002a8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000230:	2000      	movs	r0, #0
 8000232:	bd10      	pop	{r4, pc}

08000234 <HAL_Init>:
{
 8000234:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000236:	2003      	movs	r0, #3
 8000238:	f000 f824 	bl	8000284 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800023c:	2000      	movs	r0, #0
 800023e:	f7ff ffe7 	bl	8000210 <HAL_InitTick>
  HAL_MspInit();
 8000242:	f000 fd15 	bl	8000c70 <HAL_MspInit>
}
 8000246:	2000      	movs	r0, #0
 8000248:	bd08      	pop	{r3, pc}
	...

0800024c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800024c:	4a02      	ldr	r2, [pc, #8]	; (8000258 <HAL_IncTick+0xc>)
 800024e:	6813      	ldr	r3, [r2, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000020 	.word	0x20000020

0800025c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_GetTick+0x8>)
 800025e:	6818      	ldr	r0, [r3, #0]
}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000020 	.word	0x20000020

08000268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000268:	b513      	push	{r0, r1, r4, lr}
 800026a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800026c:	f7ff fff6 	bl	800025c <HAL_GetTick>
 8000270:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000272:	f7ff fff3 	bl	800025c <HAL_GetTick>
 8000276:	9b01      	ldr	r3, [sp, #4]
 8000278:	1b00      	subs	r0, r0, r4
 800027a:	4298      	cmp	r0, r3
 800027c:	d3f9      	bcc.n	8000272 <HAL_Delay+0xa>
  {
  }
}
 800027e:	b002      	add	sp, #8
 8000280:	bd10      	pop	{r4, pc}
	...

08000284 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000286:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000288:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800028a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800028e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000292:	041b      	lsls	r3, r3, #16
 8000294:	0c1b      	lsrs	r3, r3, #16
 8000296:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800029a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800029e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002a0:	60d3      	str	r3, [r2, #12]
 80002a2:	4770      	bx	lr
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002aa:	b530      	push	{r4, r5, lr}
 80002ac:	68dc      	ldr	r4, [r3, #12]
 80002ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	bf28      	it	cs
 80002bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c4:	bf98      	it	ls
 80002c6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	fa05 f303 	lsl.w	r3, r5, r3
 80002cc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d0:	bf88      	it	hi
 80002d2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d4:	4019      	ands	r1, r3
 80002d6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d8:	fa05 f404 	lsl.w	r4, r5, r4
 80002dc:	3c01      	subs	r4, #1
 80002de:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002e0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e2:	ea42 0201 	orr.w	r2, r2, r1
 80002e6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	bfaf      	iteee	ge
 80002ec:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	4b06      	ldrlt	r3, [pc, #24]	; (800030c <HAL_NVIC_SetPriority+0x64>)
 80002f2:	f000 000f 	andlt.w	r0, r0, #15
 80002f6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	bfa5      	ittet	ge
 80002fa:	b2d2      	uxtbge	r2, r2
 80002fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	e000ed00 	.word	0xe000ed00
 800030c:	e000ed14 	.word	0xe000ed14

08000310 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	3801      	subs	r0, #1
 8000312:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000316:	d20a      	bcs.n	800032e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000328:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000e010 	.word	0xe000e010
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800033e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	bf0c      	ite	eq
 8000344:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000348:	f022 0204 	bicne.w	r2, r2, #4
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	4770      	bx	lr
 8000350:	e000e010 	.word	0xe000e010

08000354 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000354:	4770      	bx	lr

08000356 <HAL_SYSTICK_IRQHandler>:
{
 8000356:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000358:	f7ff fffc 	bl	8000354 <HAL_SYSTICK_Callback>
 800035c:	bd08      	pop	{r3, pc}
	...

08000360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000364:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000366:	4616      	mov	r6, r2
 8000368:	4b65      	ldr	r3, [pc, #404]	; (8000500 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800036a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000510 <HAL_GPIO_Init+0x1b0>
 800036e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000514 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 8000372:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000376:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000378:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800037c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000380:	45a0      	cmp	r8, r4
 8000382:	d17f      	bne.n	8000484 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000384:	684d      	ldr	r5, [r1, #4]
 8000386:	2d12      	cmp	r5, #18
 8000388:	f000 80af 	beq.w	80004ea <HAL_GPIO_Init+0x18a>
 800038c:	f200 8088 	bhi.w	80004a0 <HAL_GPIO_Init+0x140>
 8000390:	2d02      	cmp	r5, #2
 8000392:	f000 80a7 	beq.w	80004e4 <HAL_GPIO_Init+0x184>
 8000396:	d87c      	bhi.n	8000492 <HAL_GPIO_Init+0x132>
 8000398:	2d00      	cmp	r5, #0
 800039a:	f000 808e 	beq.w	80004ba <HAL_GPIO_Init+0x15a>
 800039e:	2d01      	cmp	r5, #1
 80003a0:	f000 809e 	beq.w	80004e0 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003a4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003a8:	2cff      	cmp	r4, #255	; 0xff
 80003aa:	bf93      	iteet	ls
 80003ac:	4682      	movls	sl, r0
 80003ae:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003b2:	3d08      	subhi	r5, #8
 80003b4:	f8d0 b000 	ldrls.w	fp, [r0]
 80003b8:	bf92      	itee	ls
 80003ba:	00b5      	lslls	r5, r6, #2
 80003bc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003c0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003c2:	fa09 f805 	lsl.w	r8, r9, r5
 80003c6:	ea2b 0808 	bic.w	r8, fp, r8
 80003ca:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ce:	bf88      	it	hi
 80003d0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003d4:	ea48 0505 	orr.w	r5, r8, r5
 80003d8:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003dc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003e0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003e4:	d04e      	beq.n	8000484 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4d47      	ldr	r5, [pc, #284]	; (8000504 <HAL_GPIO_Init+0x1a4>)
 80003e8:	4f46      	ldr	r7, [pc, #280]	; (8000504 <HAL_GPIO_Init+0x1a4>)
 80003ea:	69ad      	ldr	r5, [r5, #24]
 80003ec:	f026 0803 	bic.w	r8, r6, #3
 80003f0:	f045 0501 	orr.w	r5, r5, #1
 80003f4:	61bd      	str	r5, [r7, #24]
 80003f6:	69bd      	ldr	r5, [r7, #24]
 80003f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003fc:	f005 0501 	and.w	r5, r5, #1
 8000400:	9501      	str	r5, [sp, #4]
 8000402:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000406:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800040c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8000410:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000414:	fa09 f90b 	lsl.w	r9, r9, fp
 8000418:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800041c:	4d3a      	ldr	r5, [pc, #232]	; (8000508 <HAL_GPIO_Init+0x1a8>)
 800041e:	42a8      	cmp	r0, r5
 8000420:	d068      	beq.n	80004f4 <HAL_GPIO_Init+0x194>
 8000422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000426:	42a8      	cmp	r0, r5
 8000428:	d066      	beq.n	80004f8 <HAL_GPIO_Init+0x198>
 800042a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800042e:	42a8      	cmp	r0, r5
 8000430:	d064      	beq.n	80004fc <HAL_GPIO_Init+0x19c>
 8000432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000436:	42a8      	cmp	r0, r5
 8000438:	bf0c      	ite	eq
 800043a:	2503      	moveq	r5, #3
 800043c:	2504      	movne	r5, #4
 800043e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000442:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 8000446:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800044a:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800044c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000450:	bf14      	ite	ne
 8000452:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000454:	43a5      	biceq	r5, r4
 8000456:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000458:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 800045e:	bf14      	ite	ne
 8000460:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000462:	43a5      	biceq	r5, r4
 8000464:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000466:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 800046c:	bf14      	ite	ne
 800046e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000470:	43a5      	biceq	r5, r4
 8000472:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000474:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000476:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 800047a:	bf14      	ite	ne
 800047c:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800047e:	ea25 0404 	biceq.w	r4, r5, r4
 8000482:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000484:	3601      	adds	r6, #1
 8000486:	2e10      	cmp	r6, #16
 8000488:	f47f af73 	bne.w	8000372 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800048c:	b003      	add	sp, #12
 800048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000492:	2d03      	cmp	r5, #3
 8000494:	d022      	beq.n	80004dc <HAL_GPIO_Init+0x17c>
 8000496:	2d11      	cmp	r5, #17
 8000498:	d184      	bne.n	80003a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800049a:	68ca      	ldr	r2, [r1, #12]
 800049c:	3204      	adds	r2, #4
          break;
 800049e:	e781      	b.n	80003a4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004a0:	4f1a      	ldr	r7, [pc, #104]	; (800050c <HAL_GPIO_Init+0x1ac>)
 80004a2:	42bd      	cmp	r5, r7
 80004a4:	d009      	beq.n	80004ba <HAL_GPIO_Init+0x15a>
 80004a6:	d812      	bhi.n	80004ce <HAL_GPIO_Init+0x16e>
 80004a8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000518 <HAL_GPIO_Init+0x1b8>
 80004ac:	454d      	cmp	r5, r9
 80004ae:	d004      	beq.n	80004ba <HAL_GPIO_Init+0x15a>
 80004b0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004b4:	454d      	cmp	r5, r9
 80004b6:	f47f af75 	bne.w	80003a4 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80004ba:	688a      	ldr	r2, [r1, #8]
 80004bc:	b1c2      	cbz	r2, 80004f0 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80004be:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004c0:	bf0c      	ite	eq
 80004c2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004c6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ca:	2208      	movs	r2, #8
 80004cc:	e76a      	b.n	80003a4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004ce:	4575      	cmp	r5, lr
 80004d0:	d0f3      	beq.n	80004ba <HAL_GPIO_Init+0x15a>
 80004d2:	4565      	cmp	r5, ip
 80004d4:	d0f1      	beq.n	80004ba <HAL_GPIO_Init+0x15a>
 80004d6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800051c <HAL_GPIO_Init+0x1bc>
 80004da:	e7eb      	b.n	80004b4 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004dc:	2200      	movs	r2, #0
 80004de:	e761      	b.n	80003a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004e0:	68ca      	ldr	r2, [r1, #12]
          break;
 80004e2:	e75f      	b.n	80003a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004e4:	68ca      	ldr	r2, [r1, #12]
 80004e6:	3208      	adds	r2, #8
          break;
 80004e8:	e75c      	b.n	80003a4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004ea:	68ca      	ldr	r2, [r1, #12]
 80004ec:	320c      	adds	r2, #12
          break;
 80004ee:	e759      	b.n	80003a4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004f0:	2204      	movs	r2, #4
 80004f2:	e757      	b.n	80003a4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004f4:	2500      	movs	r5, #0
 80004f6:	e7a2      	b.n	800043e <HAL_GPIO_Init+0xde>
 80004f8:	2501      	movs	r5, #1
 80004fa:	e7a0      	b.n	800043e <HAL_GPIO_Init+0xde>
 80004fc:	2502      	movs	r5, #2
 80004fe:	e79e      	b.n	800043e <HAL_GPIO_Init+0xde>
 8000500:	40010400 	.word	0x40010400
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800
 800050c:	10210000 	.word	0x10210000
 8000510:	10310000 	.word	0x10310000
 8000514:	10320000 	.word	0x10320000
 8000518:	10110000 	.word	0x10110000
 800051c:	10220000 	.word	0x10220000

08000520 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000520:	b10a      	cbz	r2, 8000526 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000522:	6101      	str	r1, [r0, #16]
 8000524:	4770      	bx	lr
 8000526:	0409      	lsls	r1, r1, #16
 8000528:	e7fb      	b.n	8000522 <HAL_GPIO_WritePin+0x2>

0800052a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800052a:	68c3      	ldr	r3, [r0, #12]
 800052c:	4059      	eors	r1, r3
 800052e:	60c1      	str	r1, [r0, #12]
 8000530:	4770      	bx	lr
	...

08000534 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000534:	6803      	ldr	r3, [r0, #0]
{
 8000536:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053a:	07de      	lsls	r6, r3, #31
{
 800053c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053e:	d434      	bmi.n	80005aa <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000540:	682b      	ldr	r3, [r5, #0]
 8000542:	079c      	lsls	r4, r3, #30
 8000544:	f100 80a7 	bmi.w	8000696 <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	071a      	lsls	r2, r3, #28
 800054c:	d523      	bpl.n	8000596 <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800054e:	69aa      	ldr	r2, [r5, #24]
 8000550:	4cbe      	ldr	r4, [pc, #760]	; (800084c <HAL_RCC_OscConfig+0x318>)
 8000552:	2301      	movs	r3, #1
 8000554:	49be      	ldr	r1, [pc, #760]	; (8000850 <HAL_RCC_OscConfig+0x31c>)
 8000556:	2a00      	cmp	r2, #0
 8000558:	f000 8115 	beq.w	8000786 <HAL_RCC_OscConfig+0x252>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800055c:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000560:	fab2 f282 	clz	r2, r2
 8000564:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000568:	f7ff fe78 	bl	800025c <HAL_GetTick>
 800056c:	2602      	movs	r6, #2
 800056e:	4607      	mov	r7, r0
 8000570:	fa96 f3a6 	rbit	r3, r6
 8000574:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000578:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800057a:	fa96 f3a6 	rbit	r3, r6
 800057e:	fab3 f383 	clz	r3, r3
 8000582:	f003 031f 	and.w	r3, r3, #31
 8000586:	fa22 f303 	lsr.w	r3, r2, r3
 800058a:	07db      	lsls	r3, r3, #31
 800058c:	f140 80f4 	bpl.w	8000778 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff fe69 	bl	8000268 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000596:	682b      	ldr	r3, [r5, #0]
 8000598:	0759      	lsls	r1, r3, #29
 800059a:	f100 8114 	bmi.w	80007c6 <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800059e:	69ea      	ldr	r2, [r5, #28]
 80005a0:	2a00      	cmp	r2, #0
 80005a2:	f040 8193 	bne.w	80008cc <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e020      	b.n	80005ec <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005aa:	4ca8      	ldr	r4, [pc, #672]	; (800084c <HAL_RCC_OscConfig+0x318>)
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d007      	beq.n	80005c6 <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	f003 030c 	and.w	r3, r3, #12
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d118      	bne.n	80005f2 <HAL_RCC_OscConfig+0xbe>
 80005c0:	6863      	ldr	r3, [r4, #4]
 80005c2:	03d8      	lsls	r0, r3, #15
 80005c4:	d515      	bpl.n	80005f2 <HAL_RCC_OscConfig+0xbe>
 80005c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ca:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ce:	6822      	ldr	r2, [r4, #0]
 80005d0:	fa93 f3a3 	rbit	r3, r3
 80005d4:	fab3 f383 	clz	r3, r3
 80005d8:	f003 031f 	and.w	r3, r3, #31
 80005dc:	fa22 f303 	lsr.w	r3, r2, r3
 80005e0:	07d9      	lsls	r1, r3, #31
 80005e2:	d5ad      	bpl.n	8000540 <HAL_RCC_OscConfig+0xc>
 80005e4:	686b      	ldr	r3, [r5, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1aa      	bne.n	8000540 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005ea:	2001      	movs	r0, #1
}
 80005ec:	b003      	add	sp, #12
 80005ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f2:	686b      	ldr	r3, [r5, #4]
 80005f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f8:	d11c      	bne.n	8000634 <HAL_RCC_OscConfig+0x100>
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000602:	f7ff fe2b 	bl	800025c <HAL_GetTick>
 8000606:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800060a:	4607      	mov	r7, r0
 800060c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	fa96 f3a6 	rbit	r3, r6
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	f003 031f 	and.w	r3, r3, #31
 800061e:	fa22 f303 	lsr.w	r3, r2, r3
 8000622:	07da      	lsls	r2, r3, #31
 8000624:	d48c      	bmi.n	8000540 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000626:	f7ff fe19 	bl	800025c <HAL_GetTick>
 800062a:	1bc0      	subs	r0, r0, r7
 800062c:	2864      	cmp	r0, #100	; 0x64
 800062e:	d9ed      	bls.n	800060c <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000630:	2003      	movs	r0, #3
 8000632:	e7db      	b.n	80005ec <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000634:	bb03      	cbnz	r3, 8000678 <HAL_RCC_OscConfig+0x144>
 8000636:	6823      	ldr	r3, [r4, #0]
 8000638:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800063c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000640:	6023      	str	r3, [r4, #0]
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000648:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800064a:	f7ff fe07 	bl	800025c <HAL_GetTick>
 800064e:	4607      	mov	r7, r0
 8000650:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000654:	6822      	ldr	r2, [r4, #0]
 8000656:	fa96 f3a6 	rbit	r3, r6
 800065a:	fab3 f383 	clz	r3, r3
 800065e:	f003 031f 	and.w	r3, r3, #31
 8000662:	fa22 f303 	lsr.w	r3, r2, r3
 8000666:	07db      	lsls	r3, r3, #31
 8000668:	f57f af6a 	bpl.w	8000540 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800066c:	f7ff fdf6 	bl	800025c <HAL_GetTick>
 8000670:	1bc0      	subs	r0, r0, r7
 8000672:	2864      	cmp	r0, #100	; 0x64
 8000674:	d9ec      	bls.n	8000650 <HAL_RCC_OscConfig+0x11c>
 8000676:	e7db      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	d103      	bne.n	8000688 <HAL_RCC_OscConfig+0x154>
 8000680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000684:	6023      	str	r3, [r4, #0]
 8000686:	e7b8      	b.n	80005fa <HAL_RCC_OscConfig+0xc6>
 8000688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800068c:	6023      	str	r3, [r4, #0]
 800068e:	6823      	ldr	r3, [r4, #0]
 8000690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000694:	e7b4      	b.n	8000600 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000696:	4c6d      	ldr	r4, [pc, #436]	; (800084c <HAL_RCC_OscConfig+0x318>)
 8000698:	6863      	ldr	r3, [r4, #4]
 800069a:	f013 0f0c 	tst.w	r3, #12
 800069e:	d007      	beq.n	80006b0 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006a0:	6863      	ldr	r3, [r4, #4]
 80006a2:	f003 030c 	and.w	r3, r3, #12
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d120      	bne.n	80006ec <HAL_RCC_OscConfig+0x1b8>
 80006aa:	6863      	ldr	r3, [r4, #4]
 80006ac:	03df      	lsls	r7, r3, #15
 80006ae:	d41d      	bmi.n	80006ec <HAL_RCC_OscConfig+0x1b8>
 80006b0:	2302      	movs	r3, #2
 80006b2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b6:	6822      	ldr	r2, [r4, #0]
 80006b8:	fa93 f3a3 	rbit	r3, r3
 80006bc:	fab3 f383 	clz	r3, r3
 80006c0:	f003 031f 	and.w	r3, r3, #31
 80006c4:	fa22 f303 	lsr.w	r3, r2, r3
 80006c8:	07de      	lsls	r6, r3, #31
 80006ca:	d502      	bpl.n	80006d2 <HAL_RCC_OscConfig+0x19e>
 80006cc:	692b      	ldr	r3, [r5, #16]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d18b      	bne.n	80005ea <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006d2:	6821      	ldr	r1, [r4, #0]
 80006d4:	23f8      	movs	r3, #248	; 0xf8
 80006d6:	fa93 f3a3 	rbit	r3, r3
 80006da:	fab3 f283 	clz	r2, r3
 80006de:	696b      	ldr	r3, [r5, #20]
 80006e0:	4093      	lsls	r3, r2
 80006e2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	6023      	str	r3, [r4, #0]
 80006ea:	e72d      	b.n	8000548 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ec:	692a      	ldr	r2, [r5, #16]
 80006ee:	2301      	movs	r3, #1
 80006f0:	b302      	cbz	r2, 8000734 <HAL_RCC_OscConfig+0x200>
 80006f2:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 80006f6:	fab2 f282 	clz	r2, r2
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000700:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000704:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000706:	f7ff fda9 	bl	800025c <HAL_GetTick>
 800070a:	2602      	movs	r6, #2
 800070c:	4607      	mov	r7, r0
 800070e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000712:	6822      	ldr	r2, [r4, #0]
 8000714:	fa96 f3a6 	rbit	r3, r6
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	f003 031f 	and.w	r3, r3, #31
 8000720:	fa22 f303 	lsr.w	r3, r2, r3
 8000724:	07d8      	lsls	r0, r3, #31
 8000726:	d4d4      	bmi.n	80006d2 <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000728:	f7ff fd98 	bl	800025c <HAL_GetTick>
 800072c:	1bc0      	subs	r0, r0, r7
 800072e:	2802      	cmp	r0, #2
 8000730:	d9ed      	bls.n	800070e <HAL_RCC_OscConfig+0x1da>
 8000732:	e77d      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
 8000734:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000738:	fab3 f383 	clz	r3, r3
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000742:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000746:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000748:	f7ff fd88 	bl	800025c <HAL_GetTick>
 800074c:	2602      	movs	r6, #2
 800074e:	4607      	mov	r7, r0
 8000750:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000754:	6822      	ldr	r2, [r4, #0]
 8000756:	fa96 f3a6 	rbit	r3, r6
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	f003 031f 	and.w	r3, r3, #31
 8000762:	fa22 f303 	lsr.w	r3, r2, r3
 8000766:	07d9      	lsls	r1, r3, #31
 8000768:	f57f aeee 	bpl.w	8000548 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800076c:	f7ff fd76 	bl	800025c <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9ec      	bls.n	8000750 <HAL_RCC_OscConfig+0x21c>
 8000776:	e75b      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000778:	f7ff fd70 	bl	800025c <HAL_GetTick>
 800077c:	1bc0      	subs	r0, r0, r7
 800077e:	2802      	cmp	r0, #2
 8000780:	f67f aef6 	bls.w	8000570 <HAL_RCC_OscConfig+0x3c>
 8000784:	e754      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
 8000786:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 800078a:	fab3 f383 	clz	r3, r3
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 8000792:	f7ff fd63 	bl	800025c <HAL_GetTick>
 8000796:	2602      	movs	r6, #2
 8000798:	4607      	mov	r7, r0
 800079a:	fa96 f3a6 	rbit	r3, r6
 800079e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007a4:	fa96 f3a6 	rbit	r3, r6
 80007a8:	fab3 f383 	clz	r3, r3
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
 80007b4:	07d8      	lsls	r0, r3, #31
 80007b6:	f57f aeee 	bpl.w	8000596 <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ba:	f7ff fd4f 	bl	800025c <HAL_GetTick>
 80007be:	1bc0      	subs	r0, r0, r7
 80007c0:	2802      	cmp	r0, #2
 80007c2:	d9ea      	bls.n	800079a <HAL_RCC_OscConfig+0x266>
 80007c4:	e734      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4c21      	ldr	r4, [pc, #132]	; (800084c <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007c8:	4e22      	ldr	r6, [pc, #136]	; (8000854 <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	69e3      	ldr	r3, [r4, #28]
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61e3      	str	r3, [r4, #28]
 80007d2:	69e3      	ldr	r3, [r4, #28]
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007dc:	6833      	ldr	r3, [r6, #0]
 80007de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007e4:	f7ff fd3a 	bl	800025c <HAL_GetTick>
 80007e8:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80007ea:	6833      	ldr	r3, [r6, #0]
 80007ec:	05da      	lsls	r2, r3, #23
 80007ee:	d526      	bpl.n	800083e <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f0:	68eb      	ldr	r3, [r5, #12]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d130      	bne.n	8000858 <HAL_RCC_OscConfig+0x324>
 80007f6:	6a23      	ldr	r3, [r4, #32]
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007fe:	f7ff fd2d 	bl	800025c <HAL_GetTick>
 8000802:	2602      	movs	r6, #2
 8000804:	4681      	mov	r9, r0
 8000806:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000808:	f241 3788 	movw	r7, #5000	; 0x1388
 800080c:	fa96 f3a6 	rbit	r3, r6
 8000810:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000814:	2b00      	cmp	r3, #0
 8000816:	d055      	beq.n	80008c4 <HAL_RCC_OscConfig+0x390>
 8000818:	6a22      	ldr	r2, [r4, #32]
 800081a:	fa98 f3a8 	rbit	r3, r8
 800081e:	fab3 f383 	clz	r3, r3
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	fa22 f303 	lsr.w	r3, r2, r3
 800082a:	07db      	lsls	r3, r3, #31
 800082c:	f53f aeb7 	bmi.w	800059e <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000830:	f7ff fd14 	bl	800025c <HAL_GetTick>
 8000834:	eba0 0009 	sub.w	r0, r0, r9
 8000838:	42b8      	cmp	r0, r7
 800083a:	d9e7      	bls.n	800080c <HAL_RCC_OscConfig+0x2d8>
 800083c:	e6f8      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800083e:	f7ff fd0d 	bl	800025c <HAL_GetTick>
 8000842:	1bc0      	subs	r0, r0, r7
 8000844:	2864      	cmp	r0, #100	; 0x64
 8000846:	d9d0      	bls.n	80007ea <HAL_RCC_OscConfig+0x2b6>
 8000848:	e6f2      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	42420480 	.word	0x42420480
 8000854:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000858:	bb33      	cbnz	r3, 80008a8 <HAL_RCC_OscConfig+0x374>
 800085a:	6a23      	ldr	r3, [r4, #32]
 800085c:	2602      	movs	r6, #2
 800085e:	f023 0301 	bic.w	r3, r3, #1
 8000862:	6223      	str	r3, [r4, #32]
 8000864:	6a23      	ldr	r3, [r4, #32]
 8000866:	4637      	mov	r7, r6
 8000868:	f023 0304 	bic.w	r3, r3, #4
 800086c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800086e:	f7ff fcf5 	bl	800025c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000872:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000876:	4680      	mov	r8, r0
 8000878:	fa96 f3a6 	rbit	r3, r6
 800087c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000880:	b313      	cbz	r3, 80008c8 <HAL_RCC_OscConfig+0x394>
 8000882:	6a22      	ldr	r2, [r4, #32]
 8000884:	fa97 f3a7 	rbit	r3, r7
 8000888:	fab3 f383 	clz	r3, r3
 800088c:	f003 031f 	and.w	r3, r3, #31
 8000890:	fa22 f303 	lsr.w	r3, r2, r3
 8000894:	07d8      	lsls	r0, r3, #31
 8000896:	f57f ae82 	bpl.w	800059e <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089a:	f7ff fcdf 	bl	800025c <HAL_GetTick>
 800089e:	eba0 0008 	sub.w	r0, r0, r8
 80008a2:	4548      	cmp	r0, r9
 80008a4:	d9e8      	bls.n	8000878 <HAL_RCC_OscConfig+0x344>
 80008a6:	e6c3      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	6a23      	ldr	r3, [r4, #32]
 80008ac:	d103      	bne.n	80008b6 <HAL_RCC_OscConfig+0x382>
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6223      	str	r3, [r4, #32]
 80008b4:	e79f      	b.n	80007f6 <HAL_RCC_OscConfig+0x2c2>
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6223      	str	r3, [r4, #32]
 80008bc:	6a23      	ldr	r3, [r4, #32]
 80008be:	f023 0304 	bic.w	r3, r3, #4
 80008c2:	e79b      	b.n	80007fc <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008c6:	e7a8      	b.n	800081a <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ca:	e7db      	b.n	8000884 <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008cc:	4c44      	ldr	r4, [pc, #272]	; (80009e0 <HAL_RCC_OscConfig+0x4ac>)
 80008ce:	6863      	ldr	r3, [r4, #4]
 80008d0:	f003 030c 	and.w	r3, r3, #12
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	f43f ae88 	beq.w	80005ea <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008da:	2a02      	cmp	r2, #2
 80008dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008e0:	d159      	bne.n	8000996 <HAL_RCC_OscConfig+0x462>
 80008e2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008f2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f8:	f7ff fcb0 	bl	800025c <HAL_GetTick>
 80008fc:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000900:	4607      	mov	r7, r0
 8000902:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000906:	6822      	ldr	r2, [r4, #0]
 8000908:	fa96 f3a6 	rbit	r3, r6
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	f003 031f 	and.w	r3, r3, #31
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	07d9      	lsls	r1, r3, #31
 800091a:	d436      	bmi.n	800098a <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800091c:	6a2b      	ldr	r3, [r5, #32]
 800091e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000922:	d105      	bne.n	8000930 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000924:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000926:	68a9      	ldr	r1, [r5, #8]
 8000928:	f022 020f 	bic.w	r2, r2, #15
 800092c:	430a      	orrs	r2, r1
 800092e:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000930:	6862      	ldr	r2, [r4, #4]
 8000932:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000934:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000938:	430b      	orrs	r3, r1
 800093a:	4313      	orrs	r3, r2
 800093c:	6063      	str	r3, [r4, #4]
 800093e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000942:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	2201      	movs	r2, #1
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000952:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000956:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fc80 	bl	800025c <HAL_GetTick>
 800095c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000960:	4606      	mov	r6, r0
 8000962:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000966:	6822      	ldr	r2, [r4, #0]
 8000968:	fa95 f3a5 	rbit	r3, r5
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	fa22 f303 	lsr.w	r3, r2, r3
 8000978:	07da      	lsls	r2, r3, #31
 800097a:	f53f ae14 	bmi.w	80005a6 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800097e:	f7ff fc6d 	bl	800025c <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	d9ec      	bls.n	8000962 <HAL_RCC_OscConfig+0x42e>
 8000988:	e652      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098a:	f7ff fc67 	bl	800025c <HAL_GetTick>
 800098e:	1bc0      	subs	r0, r0, r7
 8000990:	2802      	cmp	r0, #2
 8000992:	d9b6      	bls.n	8000902 <HAL_RCC_OscConfig+0x3ce>
 8000994:	e64c      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
 8000996:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800099a:	fab3 f383 	clz	r3, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009a6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ac:	f7ff fc56 	bl	800025c <HAL_GetTick>
 80009b0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009b4:	4606      	mov	r6, r0
 80009b6:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ba:	6822      	ldr	r2, [r4, #0]
 80009bc:	fa95 f3a5 	rbit	r3, r5
 80009c0:	fab3 f383 	clz	r3, r3
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	fa22 f303 	lsr.w	r3, r2, r3
 80009cc:	07db      	lsls	r3, r3, #31
 80009ce:	f57f adea 	bpl.w	80005a6 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d2:	f7ff fc43 	bl	800025c <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	2802      	cmp	r0, #2
 80009da:	d9ec      	bls.n	80009b6 <HAL_RCC_OscConfig+0x482>
 80009dc:	e628      	b.n	8000630 <HAL_RCC_OscConfig+0xfc>
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009e4:	b530      	push	{r4, r5, lr}
 80009e6:	b089      	sub	sp, #36	; 0x24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009e8:	466c      	mov	r4, sp
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009ec:	f103 0510 	add.w	r5, r3, #16
 80009f0:	4622      	mov	r2, r4
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	6859      	ldr	r1, [r3, #4]
 80009f6:	3308      	adds	r3, #8
 80009f8:	c203      	stmia	r2!, {r0, r1}
 80009fa:	42ab      	cmp	r3, r5
 80009fc:	4614      	mov	r4, r2
 80009fe:	d1f7      	bne.n	80009f0 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x90>)
 8000a02:	ac04      	add	r4, sp, #16
 8000a04:	f103 0510 	add.w	r5, r3, #16
 8000a08:	4622      	mov	r2, r4
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	6859      	ldr	r1, [r3, #4]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	c203      	stmia	r2!, {r0, r1}
 8000a12:	42ab      	cmp	r3, r5
 8000a14:	4614      	mov	r4, r2
 8000a16:	d1f7      	bne.n	8000a08 <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000a18:	4c17      	ldr	r4, [pc, #92]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8000a1a:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a1c:	f001 030c 	and.w	r3, r1, #12
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d123      	bne.n	8000a6c <HAL_RCC_GetSysClockFreq+0x88>
 8000a24:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a28:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000a2c:	fab3 f283 	clz	r2, r3
 8000a30:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8000a34:	40d3      	lsrs	r3, r2
 8000a36:	aa08      	add	r2, sp, #32
 8000a38:	4413      	add	r3, r2
 8000a3a:	f813 0c20 	ldrb.w	r0, [r3, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a3e:	03cb      	lsls	r3, r1, #15
 8000a40:	d512      	bpl.n	8000a68 <HAL_RCC_GetSysClockFreq+0x84>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 8000a42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a44:	220f      	movs	r2, #15
 8000a46:	fa92 f2a2 	rbit	r2, r2
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	aa08      	add	r2, sp, #32
 8000a56:	4413      	add	r3, r2
 8000a58:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8000a5e:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a62:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000a6a:	e7fa      	b.n	8000a62 <HAL_RCC_GetSysClockFreq+0x7e>
      sysclockfreq = HSE_VALUE;
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x98>)
  return sysclockfreq;
 8000a6e:	e7f9      	b.n	8000a64 <HAL_RCC_GetSysClockFreq+0x80>
 8000a70:	08000e08 	.word	0x08000e08
 8000a74:	08000e18 	.word	0x08000e18
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	007a1200 	.word	0x007a1200
 8000a80:	003d0900 	.word	0x003d0900

08000a84 <HAL_RCC_ClockConfig>:
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a84:	6802      	ldr	r2, [r0, #0]
{
 8000a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a88:	f012 0f02 	tst.w	r2, #2
{
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	4c44      	ldr	r4, [pc, #272]	; (8000ba0 <HAL_RCC_ClockConfig+0x11c>)
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a90:	d005      	beq.n	8000a9e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	6881      	ldr	r1, [r0, #8]
 8000a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6063      	str	r3, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a9e:	07d6      	lsls	r6, r2, #31
 8000aa0:	d420      	bmi.n	8000ae4 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aa2:	682a      	ldr	r2, [r5, #0]
 8000aa4:	0750      	lsls	r0, r2, #29
 8000aa6:	d472      	bmi.n	8000b8e <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa8:	0713      	lsls	r3, r2, #28
 8000aaa:	d506      	bpl.n	8000aba <HAL_RCC_ClockConfig+0x36>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	692a      	ldr	r2, [r5, #16]
 8000ab0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ab4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ab8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000aba:	f7ff ff93 	bl	80009e4 <HAL_RCC_GetSysClockFreq>
 8000abe:	6863      	ldr	r3, [r4, #4]
 8000ac0:	22f0      	movs	r2, #240	; 0xf0
 8000ac2:	fa92 f2a2 	rbit	r2, r2
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	4a34      	ldr	r2, [pc, #208]	; (8000ba4 <HAL_RCC_ClockConfig+0x120>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	40d8      	lsrs	r0, r3
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <HAL_RCC_ClockConfig+0x124>)
 8000ad8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fb98 	bl	8000210 <HAL_InitTick>
  return HAL_OK;
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae4:	6868      	ldr	r0, [r5, #4]
 8000ae6:	2801      	cmp	r0, #1
 8000ae8:	d10f      	bne.n	8000b0a <HAL_RCC_ClockConfig+0x86>
 8000aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aee:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	fa93 f3a3 	rbit	r3, r3
 8000af8:	fab3 f383 	clz	r3, r3
 8000afc:	f003 031f 	and.w	r3, r3, #31
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	07d9      	lsls	r1, r3, #31
 8000b06:	d412      	bmi.n	8000b2e <HAL_RCC_ClockConfig+0xaa>
 8000b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b0a:	2802      	cmp	r0, #2
 8000b0c:	bf0c      	ite	eq
 8000b0e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b12:	2302      	movne	r3, #2
 8000b14:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b18:	6822      	ldr	r2, [r4, #0]
 8000b1a:	fa93 f3a3 	rbit	r3, r3
 8000b1e:	fab3 f383 	clz	r3, r3
 8000b22:	f003 031f 	and.w	r3, r3, #31
 8000b26:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2a:	07da      	lsls	r2, r3, #31
 8000b2c:	d536      	bpl.n	8000b9c <HAL_RCC_ClockConfig+0x118>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b2e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b30:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b34:	f023 0303 	bic.w	r3, r3, #3
 8000b38:	4318      	orrs	r0, r3
 8000b3a:	6060      	str	r0, [r4, #4]
    tickstart = HAL_GetTick();
 8000b3c:	f7ff fb8e 	bl	800025c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b40:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b42:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10b      	bne.n	8000b60 <HAL_RCC_ClockConfig+0xdc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d0a7      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b52:	f7ff fb83 	bl	800025c <HAL_GetTick>
 8000b56:	1b80      	subs	r0, r0, r6
 8000b58:	42b8      	cmp	r0, r7
 8000b5a:	d9f5      	bls.n	8000b48 <HAL_RCC_ClockConfig+0xc4>
          return HAL_TIMEOUT;
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d10f      	bne.n	8000b84 <HAL_RCC_ClockConfig+0x100>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d099      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6e:	f7ff fb75 	bl	800025c <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	42b8      	cmp	r0, r7
 8000b76:	d9f5      	bls.n	8000b64 <HAL_RCC_ClockConfig+0xe0>
 8000b78:	e7f0      	b.n	8000b5c <HAL_RCC_ClockConfig+0xd8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7a:	f7ff fb6f 	bl	800025c <HAL_GetTick>
 8000b7e:	1b80      	subs	r0, r0, r6
 8000b80:	42b8      	cmp	r0, r7
 8000b82:	d8eb      	bhi.n	8000b5c <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	f013 0f0c 	tst.w	r3, #12
 8000b8a:	d1f6      	bne.n	8000b7a <HAL_RCC_ClockConfig+0xf6>
 8000b8c:	e789      	b.n	8000aa2 <HAL_RCC_ClockConfig+0x1e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	68e9      	ldr	r1, [r5, #12]
 8000b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	e785      	b.n	8000aa8 <HAL_RCC_ClockConfig+0x24>
        return HAL_ERROR;
 8000b9c:	2001      	movs	r0, #1
}
 8000b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	08000e28 	.word	0x08000e28
 8000ba8:	20000000 	.word	0x20000000

08000bac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb8:	2302      	movs	r3, #2
{
 8000bba:	b510      	push	{r4, lr}
 8000bbc:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbe:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bcc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f7ff fcb1 	bl	8000534 <HAL_RCC_OscConfig>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	b100      	cbz	r0, 8000bd8 <SystemClock_Config+0x20>
 8000bd6:	e7fe      	b.n	8000bd6 <SystemClock_Config+0x1e>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bda:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bde:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be0:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be6:	f7ff ff4d 	bl	8000a84 <HAL_RCC_ClockConfig>
 8000bea:	4604      	mov	r4, r0
 8000bec:	b100      	cbz	r0, 8000bf0 <SystemClock_Config+0x38>
 8000bee:	e7fe      	b.n	8000bee <SystemClock_Config+0x36>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000bf0:	f7ff ffdc 	bl	8000bac <HAL_RCC_GetHCLKFreq>
 8000bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bfc:	f7ff fb88 	bl	8000310 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f7ff fb9b 	bl	800033c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c06:	4622      	mov	r2, r4
 8000c08:	4621      	mov	r1, r4
 8000c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0e:	f7ff fb4b 	bl	80002a8 <HAL_NVIC_SetPriority>
}
 8000c12:	b010      	add	sp, #64	; 0x40
 8000c14:	bd10      	pop	{r4, pc}
	...

08000c18 <main>:
{
 8000c18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8000c1a:	f7ff fb0b 	bl	8000234 <HAL_Init>
  SystemClock_Config();
 8000c1e:	f7ff ffcb 	bl	8000bb8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <main+0x50>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c24:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <main+0x54>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	f042 0210 	orr.w	r2, r2, #16
 8000c2e:	619a      	str	r2, [r3, #24]
 8000c30:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c3c:	f7ff fc70 	bl	8000520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c40:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2201      	movs	r2, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	a902      	add	r1, sp, #8
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <main+0x54>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c48:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f7ff fb87 	bl	8000360 <HAL_GPIO_Init>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000c52:	4c06      	ldr	r4, [pc, #24]	; (8000c6c <main+0x54>)
 8000c54:	4620      	mov	r0, r4
 8000c56:	2102      	movs	r1, #2
 8000c58:	f7ff fc67 	bl	800052a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f7ff fb02 	bl	8000268 <HAL_Delay>
 8000c64:	e7f6      	b.n	8000c54 <main+0x3c>
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40011000 	.word	0x40011000

08000c70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_MspInit+0x78>)
{
 8000c72:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c74:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c76:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c78:	f042 0201 	orr.w	r2, r2, #1
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	f7ff fafc 	bl	8000284 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f06f 000b 	mvn.w	r0, #11
 8000c92:	4611      	mov	r1, r2
 8000c94:	f7ff fb08 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f06f 000a 	mvn.w	r0, #10
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	f7ff fb02 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f06f 0009 	mvn.w	r0, #9
 8000caa:	4611      	mov	r1, r2
 8000cac:	f7ff fafc 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f06f 0004 	mvn.w	r0, #4
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	f7ff faf6 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f06f 0003 	mvn.w	r0, #3
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	f7ff faf0 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f06f 0001 	mvn.w	r0, #1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	f7ff faea 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cda:	4611      	mov	r1, r2
 8000cdc:	f7ff fae4 	bl	80002a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	b003      	add	sp, #12
 8000ce2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <NMI_Handler>:
 8000cec:	4770      	bx	lr

08000cee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler>

08000cf0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler>

08000cf2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler>

08000cf4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler>

08000cf6 <SVC_Handler>:
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f7ff faa5 	bl	800024c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000d06:	f7ff bb26 	b.w	8000356 <HAL_SYSTICK_IRQHandler>
	...

08000d0c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <SystemInit+0x44>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000d16:	6859      	ldr	r1, [r3, #4]
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <SystemInit+0x48>)
 8000d1a:	400a      	ands	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d28:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d30:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000d38:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000d3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d3e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <SystemInit+0x4c>)
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	f8ff0000 	.word	0xf8ff0000
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff ffc3 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f000 f80f 	bl	8000da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff ff45 	bl	8000c18 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d90:	08000e40 	.word	0x08000e40
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d98:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000d9c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000da0:	20000024 	.word	0x20000024

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>
	...

08000da8 <__libc_init_array>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	2500      	movs	r5, #0
 8000dac:	4e0c      	ldr	r6, [pc, #48]	; (8000de0 <__libc_init_array+0x38>)
 8000dae:	4c0d      	ldr	r4, [pc, #52]	; (8000de4 <__libc_init_array+0x3c>)
 8000db0:	1ba4      	subs	r4, r4, r6
 8000db2:	10a4      	asrs	r4, r4, #2
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	d109      	bne.n	8000dcc <__libc_init_array+0x24>
 8000db8:	f000 f81a 	bl	8000df0 <_init>
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	4e0a      	ldr	r6, [pc, #40]	; (8000de8 <__libc_init_array+0x40>)
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <__libc_init_array+0x44>)
 8000dc2:	1ba4      	subs	r4, r4, r6
 8000dc4:	10a4      	asrs	r4, r4, #2
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	d105      	bne.n	8000dd6 <__libc_init_array+0x2e>
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dd0:	4798      	blx	r3
 8000dd2:	3501      	adds	r5, #1
 8000dd4:	e7ee      	b.n	8000db4 <__libc_init_array+0xc>
 8000dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dda:	4798      	blx	r3
 8000ddc:	3501      	adds	r5, #1
 8000dde:	e7f2      	b.n	8000dc6 <__libc_init_array+0x1e>
 8000de0:	08000e38 	.word	0x08000e38
 8000de4:	08000e38 	.word	0x08000e38
 8000de8:	08000e38 	.word	0x08000e38
 8000dec:	08000e3c 	.word	0x08000e3c

08000df0 <_init>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr

08000dfc <_fini>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	bf00      	nop
 8000e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e02:	bc08      	pop	{r3}
 8000e04:	469e      	mov	lr, r3
 8000e06:	4770      	bx	lr
